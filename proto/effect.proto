syntax = "proto3";

package dmx_controller;

import "proto/color.proto";

message RGB {
  double red = 1;
  double green = 2;
  double blue = 3;
}

message RGBW {
  double red = 1;
  double green = 2;
  double blue = 3;
  double white = 4;
}

message FixtureState {
  enum StrobeSpeed {
    NONE = 0;
    SLOW = 1;
    FAST = 2;
  }

  message Channel {
    uint32 index = 1;
    uint32 value = 2;
  }

  repeated Channel channels = 1;
  oneof light_color {
    Color color = 12;
    PaletteColor palette_color = 13;
  }

  optional double dimmer = 4;
  optional double pan = 5;
  optional double tilt = 6;
  optional double width = 10;
  optional double height = 11;
  optional double zoom = 7;
  optional double strobe = 9;
  optional uint32 wled_effect = 14;
  optional uint32 wled_palette = 15;

  reserved 8; // optional StrobeSpeed deprecated_strobe = 8 [deprecated = true];
  reserved 2; // RGB rgb = 2 [deprecated = true];
  reserved 3; // RGBW rgbw = 3 [deprecated = true];
}

enum EffectTiming {
  // The `t` value passed in corresponds to the [0, 1] value of where we are in
  // the effect itself.
  ONE_SHOT = 0;
  // The `t` value passed in corresponds to the relative timing of the beat
  // between [0, 1].
  BEAT = 1;
  reserved 2; // ABSOLUTE
}

message Effect {

  message StaticEffect {
    FixtureState state = 1;

    reserved 2; // Deprecated fixture_sequence
  }

  message RampEffect {
    enum EasingFunction {
      LINEAR = 0;
      EASE_IN = 1;
      EASE_OUT = 2;
      EASE_IN_OUT = 3;
      SINE = 4;
    }

    FixtureState state_start = 2;
    FixtureState state_end = 3;

    EasingFunction easing = 1;
    EffectTiming timing_mode = 6;
    double timing_multiplier = 7;
    bool mirrored = 8;
    double phase = 9;

    reserved 4 to 5; // Deprecated fixture_sequence_mapping
  }

  message StrobeEffect {
    int32 state_a_fames = 1;
    int32 state_b_fames = 4;

    FixtureState state_a = 2;
    FixtureState state_b = 3;
  }

  message RandomEffect {
    uint32 seed = 1;
    uint32 effect_a_min = 2;
    uint32 effect_a_variation = 3;
    uint32 effect_b_min = 4;
    uint32 effect_b_variation = 5;
    bool treat_fixtures_individually = 6;

    oneof effect_a {
      StaticEffect a_static_effect = 11;
      RampEffect a_ramp_effect = 12;
      StrobeEffect a_strobe_effect = 13;
    }

    oneof effect_b {
      StaticEffect b_static_effect = 21;
      RampEffect b_ramp_effect = 22;
      StrobeEffect b_strobe_effect = 23;
    }
  }

  uint32 start_ms = 1;
  uint32 end_ms = 2;
  reserved 3 to 10;

  reserved 19 to 100;

  oneof effect {
    StaticEffect static_effect = 101;
    RampEffect ramp_effect = 102;
    StrobeEffect strobe_effect = 103;
    RandomEffect random_effect = 104;
  }
  // Deprecated
  reserved 11; // EffectTiming timing_mode = 11 [deprecated = true];
  reserved 12; // Deprecated offset_ms
  reserved 13; // double timing_multiplier = 13 [deprecated = true];
  reserved 14; // bool mirrored = 14 [deprecated = true];
  reserved 15 to 17;
  reserved 18; // double offset_amount = 18 [deprecated = true];
}
