syntax = "proto3";

package dmx_controller;

message RGB {
  double red = 1;
  double green = 2;
  double blue = 3;
}

message RGBW {
  double red = 1;
  double green = 2;
  double blue = 3;
  double white = 4;
}

message FixtureState {

  message Channel {
    uint32 index = 1;
    uint32 value = 2;
  }

  repeated Channel channels = 1;
  oneof color {
    RGB rgb = 2;
    RGBW rgbw = 3;
  }
  optional double brightness = 4;
  optional double pan = 5;
  optional double tilt = 6;
  optional double zoom = 7;
}

message FixtureSequenceMapping {
  uint32 fixture_sequence_id = 1;
  reserved 2 to 10;
  EffectTiming timing_mode = 11;
  uint32 offset_ms = 12;
  double timing_multiplier = 13;
}

enum EffectTiming {
  // The `t` value passed in corresponds to the [0, 1] value of where we are in
  // the effect itself.
  ONE_SHOT = 0;
  // The `t` value passed in corresponds to the relative timing of the beat
  // between [0, 1].
  BEAT = 1;
  reserved 2; // ABSOLUTE
}

message Effect {

  message StaticEffect {
    oneof effect {
      FixtureState state = 1;
      FixtureSequenceMapping fixture_sequence = 2;
    }
  }

  message RampEffect {
    enum EasingFunction {
      LINEAR = 0;
      EASE_IN = 1;
      EASE_OUT = 2;
      EASE_IN_OUT = 3;
      SINE = 4;
    }

    EasingFunction easing = 1;
    oneof start {
      FixtureState fixture_state_start = 2;
      FixtureSequenceMapping fixture_sequence_mapping_start = 4;
    }
    oneof end {
      FixtureState fixture_state_end = 3;
      FixtureSequenceMapping fixture_sequence_mapping_end = 5;
    }
  }

  uint32 start_ms = 1;
  uint32 end_ms = 2;
  reserved 3 to 10;

  // Timing details
  EffectTiming timing_mode = 11;
  reserved 12; // Deprecated offset_ms
  double timing_multiplier = 13;
  bool mirrored = 14;
  reserved 15; // Deprecated
  oneof offset {
    int32 offset_ms = 16;
    double offset_beat = 17;
  }
  reserved 18 to 100;

  oneof effect {
    StaticEffect static_effect = 101;
    RampEffect ramp_effect = 102;
  }
}
