syntax = "proto3";

package dmx_controller;

import "proto/color.proto";

message FixtureState {
  enum StrobeSpeed {
    NONE = 0;
    SLOW = 1;
    FAST = 2;
  }

  message Channel {
    uint32 index = 1;
    uint32 value = 2;
  }

  repeated Channel channels = 1;
  oneof light_color {
    Color color = 12;
    PaletteColor palette_color = 13;
  }

  optional double dimmer = 4;
  optional double pan = 5;
  optional double tilt = 6;
  optional double width = 10;
  optional double height = 11;
  optional double zoom = 7;
  optional double strobe = 9;
  optional uint32 wled_effect = 14;
  optional uint32 wled_palette = 15;

  reserved 8; // optional StrobeSpeed deprecated_strobe = 8 [deprecated = true];
  reserved 2; // RGB rgb = 2 [deprecated = true];
  reserved 3; // RGBW rgbw = 3 [deprecated = true];
}

// Defines how time is mapped for cyclic effects.
message EffectTiming {
  enum EasingFunction {
    LINEAR = 0;
    EASE_IN = 1;
    EASE_OUT = 2;
    EASE_IN_OUT = 3;
    SINE = 4;
  }

  // Cycle is defined by an absolute duration.
  message Absolute {
    uint32 duration = 1;
  }

  // Cycle is defined by the beat.
  message Beat {
    float multiplier = 1;
  }

  // Cycle is defined externally. (used only during sequences)
  message OneShot {

  }

  oneof timing {
    Absolute absolute = 1;
    Beat beat = 2;
    OneShot one_shot = 3;
  }
  EasingFunction easing = 4;
  bool mirrored = 5;
  double phase = 6;
}


message TimecodedEffect {
  Effect effect = 1;
  
  uint32 start_ms = 2;
  uint32 end_ms = 3;
}

message Layer { repeated TimecodedEffect effects = 1; }


message Sequence {
  string name = 1;
  uint32 native_beats = 2;

  repeated Layer layers = 3;
}

message Effect {
  message StaticEffect {
    FixtureState state = 1;

    reserved 2; // Deprecated fixture_sequence
  }

  message RampEffect {
    FixtureState state_start = 2;
    FixtureState state_end = 3;

    EffectTiming timing_mode = 10;

    reserved 4 to 5; // Deprecated fixture_sequence_mapping
    reserved 1; // EasingFunction easing = 1;
    reserved 6; // EffectTiming timing_mode = 6;
    reserved 7; // double timing_multiplier = 7;
    reserved 8; // bool mirrored = 8;
    reserved 9; // double phase = 9;
  }

  message StrobeEffect {
    uint32 state_a_fames = 1;
    uint32 state_b_fames = 4;

    FixtureState state_a = 2;
    FixtureState state_b = 3;
  }

  message RandomEffect {
    uint32 seed = 1;
    uint32 effect_a_min = 2;
    uint32 effect_a_variation = 3;
    uint32 effect_b_min = 4;
    uint32 effect_b_variation = 5;
    bool treat_fixtures_individually = 6;

    Effect effect_a = 7;
    Effect effect_b = 8;
  }

  message SequenceEffect {
    oneof sequence {
      uint64 sequence_id = 1;
      Sequence sequence_impl = 2;
    }

    EffectTiming timing_mode = 4;
  }

  reserved 3 to 10;

  reserved 19 to 100;

  oneof effect {
    StaticEffect static_effect = 101;
    RampEffect ramp_effect = 102;
    StrobeEffect strobe_effect = 103;
    RandomEffect random_effect = 104;
    SequenceEffect sequence_effect = 105;
  }

  // Deprecated
  reserved 1; // uint32 start_ms = 1;
  reserved 2; // uint32 end_ms = 2;
  reserved 11; // EffectTiming timing_mode = 11 [deprecated = true];
  reserved 12; // Deprecated offset_ms
  reserved 13; // double timing_multiplier = 13 [deprecated = true];
  reserved 14; // bool mirrored = 14 [deprecated = true];
  reserved 15 to 17;
  reserved 18; // double offset_amount = 18 [deprecated = true];
}
