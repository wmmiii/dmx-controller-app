syntax = "proto3";

package dmx_controller;

import "proto/audio.proto";
import "proto/beat.proto";
import "proto/controller.proto";
import "proto/fixture_definitions.proto";
import "proto/output.proto";
import "proto/scene.proto";
import "proto/show.proto";

message Project {
  message Assets {
    map<uint32, AudioFile> audio_files = 2;

    reserved 1; // repeated AudioFile deprecated_audio_files = 1 [ deprecated = true ];
  }

  string name = 1;
  uint32 version = 2;
  reserved 3 to 10;

  // Path descriptions
  uint64 active_patch = 18;
  map<uint64, Patch> patches = 40;
  FixtureDefinitions fixture_definitions = 43;
  map<uint64, TargetGroup> groups = 19;

  Assets assets = 21;

  repeated Show shows = 31;
  int32 selected_show = 32;

  // Fixture sequence 0 is reserved for the "unset" sequence.
  reserved 42; // universe_sequences

  // Scene 0 is reserved for the "unset" scene.
  map<uint64, Scene> scenes = 56;
  uint64 active_scene = 57;
  BeatMetadata live_beat = 53;
  reserved 54; // last_controller_name
  ControllerMapping controller_mapping = 55;

  reserved 52; // uint32 active_scene = 52;
  reserved 51; // repeated Scene scenes = 51;
  reserved 11; // uint32 update_frequency_ms = 11;
  reserved 12; // int32 timing_offset_ms = 12;
  reserved 14; // map<uint32, PhysicalDmxFixture> physical_fixtures = 14 [ deprecated = true ];
  reserved 41; // map<uint32, FixtureSequence> fixture_sequences = 41 [ deprecated = true ];
  reserved 16; // repeated DefaultChannelValues default_channel_values = 16 [ deprecated = true ];
  reserved 13; // map<uint32, DmxFixtureDefinition> deprecated_uint32_fixture_definitions = 13 [ deprecated = true ];
  reserved 15; // map<uint32, PhysicalFixtureGroup> physical_fixture_groups = 15 [ deprecated = true ];
  reserved 20; // map<uint64, DmxFixtureDefinition> deprecated_uint64_fixture_definitions = 20;
  reserved 17; // map<uint64, Universe> universes = 17 [deprecated = true];
  reserved 22; //map<string, DmxFixtureDefinition> fixture_definitions = 22;

  // message DefaultChannelValues {
  //   string name = 1;
  //   oneof output {
  //     uint32 physical_fixture_id = 2;
  //     uint32 physical_fixture_group_id = 3;
  //   }
  //   OutputTarget output_target = 5;
  //   map<uint32, uint32> channels = 4;
  // }
}
