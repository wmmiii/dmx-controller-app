syntax = "proto3";

package dmx_controller;

import "proto/color.proto";
import "proto/effect.proto";
import "proto/light_track.proto";
import "proto/output_id.proto";

// A scene is a part of a live show that composes components together to form
// the final output of the universe.
message Scene {

  // A component is a part of a scene that can be enabled or disabled and
  // applies state to the universe.
  message Component {
    message EffectGroupComponent {
      message EffectChannel {
        Effect effect = 1;

        OutputId output_id = 2;
      }

      repeated EffectChannel channels = 5;
      
      Effect effect = 1 [deprecated = true];

      oneof output {
        uint32 physical_fixture_id = 2 [deprecated = true];
        uint32 physical_fixture_group_id = 3 [deprecated = true];
      }

      OutputId output_id = 4 [deprecated = true];
    }

    message SequenceComponent {
      string name = 1;
      uint32 native_beats = 2;

      reserved 3 to 10;

      repeated LightTrack light_tracks = 11;
    }

    string name = 1;
    reserved 2; // universe_sequence_id
    oneof description {
      SequenceComponent sequence = 13;
      EffectGroupComponent effect_group = 14;
    }
    reserved 3; // active
    string shortcut = 4;
    bool one_shot = 15;

    oneof duration {
      int32 duration_ms = 5;
      double duration_beat = 6;
    }

    oneof fade_in_duration {
      int32 fade_in_ms = 7;
      int32 fade_in_beat = 8;
    }

    oneof fade_out_duration {
      int32 fade_out_ms = 9;
      int32 fade_out_beat = 10;
    }

    oneof transition {
      int64 start_fade_in_ms = 11;
      int64 start_fade_out_ms = 12;
    }
  }

  message ComponentRow {
    option deprecated = true;
    repeated Component components = 11;
  }

  message ComponentMap {
    Component component = 1;

    // The horizontal index of the component, measured from left to right.
    int32 x = 2;
    // The vertical index of the component, measured from top to bottom.
    int32 y = 3;
  }

  string name = 1;
  repeated ColorPalette color_palettes = 2;
  uint32 active_color_palette = 3;
  uint32 last_active_color_palette = 4;
  uint32 color_palette_transition_duration_ms = 5;
  uint64 color_palette_start_transition = 6;
  reserved 7 to 10;

  repeated Component components = 11 [deprecated = true];
  repeated ComponentRow rows = 12 [deprecated = true];
  repeated ComponentMap componentMap = 13;
}
